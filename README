Overview
========

Traction is a small Trac (trac.edgewall.org) 'distribution'; it integrates
Trac with a number of useful add-ons and additional fixes to create a
functional Trac environment.

It is currently tracking the 1.5.x series of Trac and so it works with Python
3. It is mostly tested on Debian+lighttpd but should work with minimal changes
on any recent-ish Linux.


What's included
===============

The following packages are included:

 - Trac-1.5.4 (https://download.edgewall.org/trac/Trac-1.5.4.tar.gz)
 - Account Manager Plugin (https://trac-hacks.org/wiki/AccountManagerPlugin)
 - LDAP Account Manager Plugin (https://trac-hacks.org/wiki/LDAPAcctMngrPlugin)
 - Default CC Plugin (https://trac-hacks.org/wiki/DefaultCcPlugin)
 - Autocomplete users plugin (https://trac-hacks.org/wiki/AutocompleteUsersPlugin)
 
Installation
============

In addition to python3, web server etc the following are required (note these
are Debian names):

 - python3-setuptools
 - sqlite3
 - python3-jinja2
 - python3-docutils
 - python3-ldap

The script/install.sh script builds and installs all the necessary packages, in the
correct order under the site-packages directory specified as the first
argument. Note that this may need root permissions. This is really a matter of
running 'python setup.py install' in each package and can easily be done by
hand - the purpose of the scrip is mainly to record what needs installed and
in what order.

Known Issues
============


Developer Notes
===============

Branches
--------


The repo comprises the following two branches:

* upstream - tracks the vanilla packages. As Trac has a plethora of 3rd party
  plugins, which use an array of revision control strategies, the easiest
  option was to download release archives for trac & packages and import them
  in here rather than tracking upstream branches. Note that some of the
  plugins releases are little more than an archive of the development tree
  from SVN/GIT so they may contain RCS - related file, and the naming of the
  top directory is also not consistent. The approach is to extract the trunk
  (or whatever branch is needed) and commit that into git with a suitable
  rename.


* main - contais local patches / customization on top of what's on
  upstream. This is what actually gets installed.
  

Upgarding packages
------------------

Upgrading from upstream should be done on the upstream branch, and then the
result of that pulled into the main branch, followed by a re-install of the
affected packages.

As indicated above, new packages should be download in .zip / .tar.gz
form. Remove the full contents of the old package's directory, then iniside
the now empty directory add the contents of the relevant subdir of the new
directory, the git add it. Run 'git status' to confirm that the new files are
replacing the old ones and the vast majority of files are unchanged, bar the
actual changes between releases.

When adding a new package the procedure is roughly simmilar - the directory
that you need is the one containing 'setup.py', eg for a zip called
'tracfooplugin.zip' which contains an SVN tree with subdirectories 'branches',
'tags', 'trunk' you'll probably want to rename 'tracfoolugin/trunk' to
'fooplugin' and remvoe the rest. The 'fooplugin' dir should contain the
'setup.py' script. And you should add 'fooplugin' to the packages list in the
install.sh script, paying attention to the installation order.

Once added, merge into main. Update the install script, check that the addded
package works, implement any needed fixes then update this README.
